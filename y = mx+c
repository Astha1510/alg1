#include <windows.h>  // For MS Windows
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>  // GLUT, includes glu.h and gl.h
#include <iostream>
#include <cstdlib>
#include<math.h>
#include<dos.h>
using namespace std;

void line(float x1, float y1, float x2, float y2) {
	glClear(GL_COLOR_BUFFER_BIT);
	
	glBegin(GL_POINTS);
	float m, c;
	
	
	m = (y2 - y1) / (x2 - x1);
	c = y1 - (m * x1);
	
	cout<<"\nm = "<<m<<"\nc = "<<c;
	cout<<"\n\nPoints Plotted : ";
	if(fabs(m) <=1){
		for(float x = x1; x <= x2; x++){
			glColor3f(1.0, 1.0, 0.0);
			float y = (m * x) + c;
			cout<<"\n"<<x<<" "<<y;
			glVertex2f(x, y);
		}
	}
	else{
		for(float y = y1; y <= y2; y++){
			glColor3f(1.0, 1.0, 0.0);
			float x = (y - c) / m;
			cout<<"\n"<<x<<" "<<y;
			glVertex2f(x, y);
		}
	}
	cout<<"\n\n";
	glEnd();
	

	glFlush();
}
void display(void) {
	float x1, y1, x2, y2;
	cout << "Enter point (x1, y1) :\n";
	cin>>x1>>y1;
	cout<<"Enter point (x2, y2) :\n";
	cin>>x2>>y2;
	line(x1, y1, x2, y2);
}

void myinit() {
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glColor3f(1.0, 0.0, 0.0);
	glPointSize(3.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0.0, 499.0, 0.0, 499.0);
}

int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("Astha");
	glutDisplayFunc(display);

	myinit();
	glutMainLoop();
	return 0;
}
