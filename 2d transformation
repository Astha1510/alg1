#include<windows.h>
#include<GL/glut.h>
#include<GL/gl.h>
#include<GL/glu.h>
#include<iostream>
#include<math.h>

using namespace std;

void transformation(int x1,int y1,int x2,int y2,int x3,int y3,int tx,int ty,int sx,int sy)
{
	
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_LINE_LOOP);
	glColor3f(1.0f,0.0f,0.0f);
	
	int x,y,z,xx,yy,zz;
	glVertex2f(x1,y1);
	glVertex2f(x2,y2);
	glVertex2f(x3,y3);
	
	//translate
	x1 = x1 + tx;
	y1 = y1 + ty;
	x2 = x2 + tx;
	y2 = y2 + ty;
	x3 = x3 + tx;
	y3 = y3 + ty;
	glVertex2f(x1,y1);
	glVertex2f(x2,y2);
	glVertex2f(x3,y3);
	
	//scaling
	x1 = x1 + sx;
	y1 = y1 + sy;
	x2 = x2 + sx;
	y2 = y2 + sy;
	x3 = x3 + sx;
	y3 = y3 + sy;
	glVertex2f(x1,y1);
	glVertex2f(x2,y2);
	glVertex2f(x3,y3);
	
	//rotation
	
	
	glEnd();
	glFlush();
}
void display(){
	
	int x1,y1,x2,y2,x3,y3,tx,ty,sx,sy;
	cout << "Enter (x1,y1) , (x2,y2) , (x3,y3) points"<<endl;
	cin>>x1>>y1>>x2>>y2>>x3>>y3;
	cout << "Enter translation factor (tx,ty,sx,sy)"<<endl;
	cin>>tx>>ty>>sx>>sy;
	transformation(x1,y1,x2,y2,x3,y3,tx,ty,sx,sy);
}

void myInit(){
	glClearColor(1.0,1.0,1.0,0.0);
	glPointSize(5.0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(-780,780,-420,420);
	
}
int main( int argc , char** argv){
	
	glutInit(&argc,argv); //initialize the glut tool kit
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); //create single window system with background RGB 
	glutInitWindowSize(500,500); //Define window size
	glutInitWindowPosition(0,0); // Origin
	glutCreateWindow("Aishvarya");
	myInit(); // create window with title 
	glutDisplayFunc(display); // call back function
	glutMainLoop(); //Enter the infinitely event-processing loop
	
	return 0;
}
